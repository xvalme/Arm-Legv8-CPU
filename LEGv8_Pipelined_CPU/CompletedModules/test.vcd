$date
	Tue Mar 08 21:41:33 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPU_tb $end
$scope module cpu $end
$var wire 1 ! clock $end
$var wire 1 " en_jump $end
$var wire 1 # writemem_en_id_ex $end
$var wire 1 $ writemem_en_ex_mem $end
$var wire 1 % writemem_en $end
$var wire 5 & write_reg_mem_wb [4:0] $end
$var wire 5 ' write_reg_id_ex [4:0] $end
$var wire 5 ( write_reg_ex_mem [4:0] $end
$var wire 64 ) write_data [63:0] $end
$var wire 64 * sign_extended_address_id_ex [63:0] $end
$var wire 64 + sign_extended_address [63:0] $end
$var wire 1 , reg2loc $end
$var wire 1 - readmem_en_id_ex $end
$var wire 1 . readmem_en_ex_mem $end
$var wire 1 / readmem_en $end
$var wire 64 0 read2_id_ex [63:0] $end
$var wire 64 1 read2_ex_mem [63:0] $end
$var wire 64 2 read2 [63:0] $end
$var wire 64 3 read1_id_ex [63:0] $end
$var wire 64 4 read1 [63:0] $end
$var wire 5 5 out_reg2loc [4:0] $end
$var wire 64 6 out_ALUSrc [63:0] $end
$var wire 1 7 memtoreg_mem_wb $end
$var wire 1 8 memtoreg_id_ex $end
$var wire 1 9 memtoreg_ex_mem $end
$var wire 1 : memtoreg $end
$var wire 64 ; mem_data_mem_wb [63:0] $end
$var wire 64 < mem_data [63:0] $end
$var wire 64 = jump_address_ex_mem [63:0] $end
$var wire 64 > jump_address [63:0] $end
$var wire 32 ? instruction_mem_wb [31:0] $end
$var wire 32 @ instruction_id_ex [31:0] $end
$var wire 32 A instruction_ex_mem [31:0] $end
$var wire 32 B instruction [31:0] $end
$var wire 64 C counter [63:0] $end
$var wire 11 D alu_ctrl_data [10:0] $end
$var wire 1 E Zero_ex_mem $end
$var wire 1 F Zero $end
$var wire 1 G UncBranch_id_ex $end
$var wire 1 H UncBranch_ex_mem $end
$var wire 1 I UncBranch $end
$var wire 1 J RegWrite_mem_wb $end
$var wire 1 K RegWrite_id_ex $end
$var wire 1 L RegWrite_ex_mem $end
$var wire 1 M RegWrite $end
$var wire 32 N Instruction_if_id [31:0] $end
$var wire 64 O Counter_if_id [63:0] $end
$var wire 64 P Counter_id_ex [63:0] $end
$var wire 1 Q Branch_id_ex $end
$var wire 1 R Branch_ex_mem $end
$var wire 1 S Branch $end
$var wire 2 T AluOp [1:0] $end
$var wire 2 U AluOP_id_ex [1:0] $end
$var wire 64 V ALU_out_mem_wb [63:0] $end
$var wire 64 W ALU_out_ex_mem [63:0] $end
$var wire 64 X ALU_out [63:0] $end
$var wire 1 Y ALUSrc_id_ex $end
$var wire 1 Z ALUSrc $end
$var wire 4 [ ALUCtrl [3:0] $end
$scope module ALU $end
$var wire 64 \ B [63:0] $end
$var wire 4 ] ALUctr [3:0] $end
$var wire 64 ^ A [63:0] $end
$var reg 64 _ Out [63:0] $end
$var reg 1 F Zero $end
$upscope $end
$scope module Aluctrl $end
$var wire 2 ` ALU_Op [1:0] $end
$var wire 11 a ALU_INSTRUCTION [10:0] $end
$var reg 4 b ALU_Out [3:0] $end
$upscope $end
$scope module EX_MEM $end
$var wire 64 c alu_result [63:0] $end
$var wire 1 ! clock $end
$var wire 1 F zero $end
$var wire 5 d write_reg [4:0] $end
$var wire 1 G uncBranch $end
$var wire 1 K regWrite $end
$var wire 64 e read2 [63:0] $end
$var wire 1 # memwrite $end
$var wire 1 8 memtoReg $end
$var wire 1 - memread $end
$var wire 32 f instruction [31:0] $end
$var wire 1 Q branch $end
$var wire 64 g add_result [63:0] $end
$var reg 64 h Add_result [63:0] $end
$var reg 64 i Alu_result [63:0] $end
$var reg 1 R Branch $end
$var reg 32 j Instruction_ex_mem [31:0] $end
$var reg 1 . Memread $end
$var reg 1 9 MemtoReg $end
$var reg 1 $ Memwrite $end
$var reg 64 k Read2 [63:0] $end
$var reg 1 L RegWrite $end
$var reg 1 H UncBranch $end
$var reg 5 l Write_reg [4:0] $end
$var reg 1 E Zero $end
$upscope $end
$scope module ID_EX $end
$var wire 1 ! clock $end
$var wire 1 I uncond_branch $end
$var wire 64 m sign_extended [63:0] $end
$var wire 1 M regWrite $end
$var wire 64 n read2 [63:0] $end
$var wire 64 o read1 [63:0] $end
$var wire 64 p pc [63:0] $end
$var wire 1 % memwrite $end
$var wire 1 : memtoReg $end
$var wire 1 / memread $end
$var wire 32 q instruction [31:0] $end
$var wire 1 S branch $end
$var wire 2 r aluop [1:0] $end
$var wire 1 Z aluSrc $end
$var reg 1 Y ALUSrc $end
$var reg 2 s Aluop [1:0] $end
$var reg 1 Q Branch $end
$var reg 32 t Instruction_id_ex [31:0] $end
$var reg 1 - Memread $end
$var reg 1 8 MemtoReg $end
$var reg 1 # Memwrite $end
$var reg 64 u Pc [63:0] $end
$var reg 64 v Read1 [63:0] $end
$var reg 64 w Read2 [63:0] $end
$var reg 1 K RegWrite $end
$var reg 64 x Sign_extended [63:0] $end
$var reg 1 G Uncond_Branch $end
$var reg 11 y alu_ctrl_data [10:0] $end
$var reg 5 z write_reg [4:0] $end
$upscope $end
$scope module IF_ID $end
$var wire 1 ! clock $end
$var wire 64 { pc [63:0] $end
$var wire 32 | instruction [31:0] $end
$var reg 32 } Instruction_if_id [31:0] $end
$var reg 64 ~ Pc [63:0] $end
$upscope $end
$scope module JumpAdder $end
$var wire 64 !" A [63:0] $end
$var wire 4 "" ALUctr [3:0] $end
$var wire 64 #" B [63:0] $end
$var reg 64 $" Out [63:0] $end
$var reg 1 %" Zero $end
$upscope $end
$scope module MEM_WB $end
$var wire 64 &" alu_result [63:0] $end
$var wire 1 ! clock $end
$var wire 32 '" instruction [31:0] $end
$var wire 1 9 memtoReg $end
$var wire 1 L regWrite $end
$var wire 5 (" write_reg [4:0] $end
$var wire 64 )" read_data [63:0] $end
$var reg 64 *" Alu_result [63:0] $end
$var reg 32 +" Instruction_mem_wb [31:0] $end
$var reg 1 7 MemtoReg $end
$var reg 64 ," Read_data [63:0] $end
$var reg 1 J RegWrite $end
$var reg 5 -" Write_reg [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clock $end
$var wire 1 " en_jump $end
$var wire 64 ." jump [63:0] $end
$var reg 64 /" counter [63:0] $end
$upscope $end
$scope module ROM $end
$var wire 1 ! clock $end
$var wire 64 0" counter [63:0] $end
$var reg 32 1" instruction [31:0] $end
$upscope $end
$scope module alusrc_mux $end
$var wire 64 2" address [63:0] $end
$var wire 1 Y alusrc $end
$var wire 64 3" reg2 [63:0] $end
$var reg 64 4" out [63:0] $end
$upscope $end
$scope module control_unit $end
$var wire 11 5" Instruction [10:0] $end
$var reg 1 Z ALUSrc $end
$var reg 2 6" AluOp [1:0] $end
$var reg 1 S Branch $end
$var reg 1 / MemRead $end
$var reg 1 % MemWrite $end
$var reg 1 : MemtoReg $end
$var reg 1 , Reg2Loc $end
$var reg 1 M RegWrite $end
$var reg 1 I UncBranch $end
$upscope $end
$scope module memtoreg_mux $end
$var wire 64 7" ALU_result [63:0] $end
$var wire 64 8" data [63:0] $end
$var wire 1 7 src $end
$var reg 64 9" out [63:0] $end
$upscope $end
$scope module ram $end
$var wire 64 :" address [63:0] $end
$var wire 64 ;" data_in [63:0] $end
$var wire 1 . read_en $end
$var wire 1 $ write_en $end
$var reg 64 <" out [63:0] $end
$var integer 32 =" initCount [31:0] $end
$upscope $end
$scope module reg2loc_mux $end
$var wire 5 >" a [4:0] $end
$var wire 5 ?" b [4:0] $end
$var wire 1 @" in_cable $end
$var reg 5 A" out [4:0] $end
$upscope $end
$scope module regs $end
$var wire 5 B" add1 [4:0] $end
$var wire 5 C" add2 [4:0] $end
$var wire 1 ! clock $end
$var wire 5 D" write_add [4:0] $end
$var wire 64 E" write_data [63:0] $end
$var wire 1 J write_en $end
$var reg 64 F" read_1 [63:0] $end
$var reg 64 G" read_2 [63:0] $end
$var integer 32 H" i [31:0] $end
$var integer 32 I" u [31:0] $end
$upscope $end
$scope module sign_extender $end
$var wire 32 J" in [31:0] $end
$var reg 64 K" out [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx K"
bx J"
bx I"
b11111 H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
x@"
bx ?"
bx >"
b100000 ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
b0 0"
b0 /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
0%"
bx $"
bx #"
b10 ""
bx !"
bx ~
bx }
bx |
b0 {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
xZ
xY
bx X
bx W
bx V
bx U
bx T
xS
xR
xQ
bx P
bx O
bx N
xM
xL
xK
xJ
xI
xH
xG
xF
xE
bx D
b0 C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
x:
x9
x8
x7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
x/
x.
x-
x,
bx +
bx *
bx )
bx (
bx '
bx &
x%
x$
x#
x"
0!
$end
#1
b0 B
b0 |
b0 1"
b0 O
b0 p
b0 ~
b100000 I"
1!
#2
b0 P
b0 u
b0 !"
0!
#3
0I
b0 T
b0 r
b0 6"
0S
0%
0/
0M
0:
0Z
0,
b0 5
b0 A"
b0 C"
b0 +
b0 m
b0 K"
b0 5"
b0 B"
0@"
b0 ?"
b0 >"
b100000 I"
b0 N
b0 q
b0 }
b0 J"
1!
#4
1%"
0F
b0 >
b0 g
b0 $"
b10 [
b10 ]
b10 b
b0 2
b0 n
b0 G"
b0 4
b0 o
b0 F"
b0 @
b0 f
b0 t
0G
08
0K
0#
0-
0Q
0Y
b0 U
b0 `
b0 s
b0 *
b0 x
b0 #"
b0 2"
b0 '
b0 d
b0 z
b0 D
b0 a
b0 y
0!
#5
0"
b100000 I"
b0 A
b0 j
b0 '"
0H
09
0L
0$
0.
0R
b0 (
b0 l
b0 ("
0E
b0 =
b0 h
b0 ."
1!
#6
1F
b0 X
b0 _
b0 c
b0 6
b0 \
b0 4"
b1 C
b1 {
b1 /"
b1 0"
b0 ?
b0 +"
07
0J
b0 &
b0 -"
b0 D"
b0 0
b0 e
b0 w
b0 3"
b0 3
b0 ^
b0 v
0!
#7
b0 1
b0 k
b0 ;"
1E
b0 W
b0 i
b0 &"
b0 :"
b100000 I"
b1 O
b1 p
b1 ~
1!
#8
0%"
b1 >
b1 g
b1 $"
b0 )
b0 9"
b0 E"
b10 C
b10 {
b10 /"
b10 0"
b1 P
b1 u
b1 !"
b0 V
b0 *"
b0 7"
0!
#9
b10 O
b10 p
b10 ~
b100000 I"
b1 =
b1 h
b1 ."
1!
#10
b10 >
b10 g
b10 $"
b11 C
b11 {
b11 /"
b11 0"
b10 P
b10 u
b10 !"
0!
#11
b10 =
b10 h
b10 ."
b100000 I"
b11 O
b11 p
b11 ~
1!
#12
b11 >
b11 g
b11 $"
b100 C
b100 {
b100 /"
b100 0"
b11 P
b11 u
b11 !"
0!
#13
b100 O
b100 p
b100 ~
b100000 I"
b11 =
b11 h
b11 ."
1!
#14
b100 >
b100 g
b100 $"
b101 C
b101 {
b101 /"
b101 0"
b100 P
b100 u
b100 !"
0!
#15
b11111000010000000000000110000010 B
b11111000010000000000000110000010 |
b11111000010000000000000110000010 1"
b100 =
b100 h
b100 ."
b100000 I"
b101 O
b101 p
b101 ~
1!
#16
b101 >
b101 g
b101 $"
b110 C
b110 {
b110 /"
b110 0"
b101 P
b101 u
b101 !"
0!
#17
1/
1M
1:
1Z
b10 5
b10 A"
b10 C"
b11111000010000000000000100000011 B
b11111000010000000000000100000011 |
b11111000010000000000000100000011 1"
b11111000010 5"
b1100 B"
1@"
b10 ?"
b11111000010000000000000110000010 N
b11111000010000000000000110000010 q
b11111000010000000000000110000010 }
b11111000010000000000000110000010 J"
b110 O
b110 p
b110 ~
b100000 I"
b101 =
b101 h
b101 ."
1!
#18
0F
b110 >
b110 g
b110 $"
b1100 X
b1100 _
b1100 c
b111 C
b111 {
b111 /"
b111 0"
b11111000010000000000000110000010 @
b11111000010000000000000110000010 f
b11111000010000000000000110000010 t
18
1K
1-
1Y
b110 P
b110 u
b110 !"
b10 0
b10 e
b10 w
b10 3"
b1100 3
b1100 ^
b1100 v
b10 '
b10 d
b10 z
b11111000010 D
b11111000010 a
b11111000010 y
b10 2
b10 n
b10 G"
b1100 4
b1100 o
b1100 F"
0!
#19
b11 5
b11 A"
b11 C"
b10010110000 <
b10010110000 )"
b10010110000 <"
b0 B
b0 |
b0 1"
b1000 B"
b11 ?"
b11111000010000000000000110000010 A
b11111000010000000000000110000010 j
b11111000010000000000000110000010 '"
19
1L
1.
b10 (
b10 l
b10 ("
b10 1
b10 k
b10 ;"
0E
b1100 W
b1100 i
b1100 &"
b1100 :"
b110 =
b110 h
b110 ."
b100000 I"
b11111000010000000000000100000011 N
b11111000010000000000000100000011 q
b11111000010000000000000100000011 }
b11111000010000000000000100000011 J"
b111 O
b111 p
b111 ~
1!
#20
b111 >
b111 g
b111 $"
b10010110000 )
b10010110000 9"
b10010110000 E"
b1000 C
b1000 {
b1000 /"
b1000 0"
b11 2
b11 n
b11 G"
b1000 4
b1000 o
b1000 F"
b11111000010000000000000100000011 @
b11111000010000000000000100000011 f
b11111000010000000000000100000011 t
b111 P
b111 u
b111 !"
b11 '
b11 d
b11 z
b11111000010000000000000110000010 ?
b11111000010000000000000110000010 +"
17
1J
b10 &
b10 -"
b10 D"
b1100 V
b1100 *"
b1100 7"
b10010110000 ;
b10010110000 ,"
b10010110000 8"
0!
#21
0/
0M
0:
0Z
b0 5
b0 A"
b0 C"
b10001011000000100000000001101001 B
b10001011000000100000000001101001 |
b10001011000000100000000001101001 1"
b0 5"
b0 B"
0@"
b0 ?"
b0 N
b0 q
b0 }
b0 J"
b1000 O
b1000 p
b1000 ~
b100000 I"
b11111000010000000000000100000011 A
b11111000010000000000000100000011 j
b11111000010000000000000100000011 '"
b11 (
b11 l
b11 ("
b111 =
b111 h
b111 ."
1!
#22
1F
b1000 >
b1000 g
b1000 $"
b0 X
b0 _
b0 c
b1001 C
b1001 {
b1001 /"
b1001 0"
b11111000010000000000000100000011 ?
b11111000010000000000000100000011 +"
b11 &
b11 -"
b11 D"
b0 @
b0 f
b0 t
08
0K
0-
0Y
b1000 P
b1000 u
b1000 !"
b0 0
b0 e
b0 w
b0 3"
b0 3
b0 ^
b0 v
b0 '
b0 d
b0 z
b0 D
b0 a
b0 y
b0 2
b0 n
b0 G"
b0 4
b0 o
b0 F"
0!
#23
b10 T
b10 r
b10 6"
1M
b10 5
b10 A"
b10 C"
b100000 +
b100000 m
b100000 K"
b10101010000000010000001010000101 B
b10101010000000010000001010000101 |
b10101010000000010000001010000101 1"
b10001011000 5"
b11 B"
b1001 ?"
b10 >"
b0 A
b0 j
b0 '"
09
0L
0.
b0 (
b0 l
b0 ("
b0 1
b0 k
b0 ;"
1E
b0 W
b0 i
b0 &"
b0 :"
b1000 =
b1000 h
b1000 ."
b100000 I"
b10001011000000100000000001101001 N
b10001011000000100000000001101001 q
b10001011000000100000000001101001 }
b10001011000000100000000001101001 J"
b1001 O
b1001 p
b1001 ~
1!
#24
b101001 >
b101001 g
b101001 $"
b0 )
b0 9"
b0 E"
b1010 C
b1010 {
b1010 /"
b1010 0"
b10010110000 2
b10010110000 n
b10010110000 G"
b10010110000 4
b10010110000 o
b10010110000 F"
b10001011000000100000000001101001 @
b10001011000000100000000001101001 f
b10001011000000100000000001101001 t
1K
b10 U
b10 `
b10 s
b1001 P
b1001 u
b1001 !"
b100000 *
b100000 x
b100000 #"
b100000 2"
b1001 '
b1001 d
b1001 z
b10001011000 D
b10001011000 a
b10001011000 y
b0 ?
b0 +"
07
0J
b0 &
b0 -"
b0 D"
b0 V
b0 *"
b0 7"
0!
#25
b1 5
b1 A"
b1 C"
b10000 +
b10000 m
b10000 K"
bx B
bx |
bx 1"
b10101010000 5"
b10100 B"
b101 ?"
b1 >"
b10101010000000010000001010000101 N
b10101010000000010000001010000101 q
b10101010000000010000001010000101 }
b10101010000000010000001010000101 J"
b1010 O
b1010 p
b1010 ~
b100000 I"
b10001011000000100000000001101001 A
b10001011000000100000000001101001 j
b10001011000000100000000001101001 '"
1L
b1001 (
b1001 l
b1001 ("
b101001 =
b101001 h
b101001 ."
1!
#26
0F
b11010 >
b11010 g
b11010 $"
b1 6
b1 \
b1 4"
b10101 X
b10101 _
b10101 c
b1 [
b1 ]
b1 b
b1011 C
b1011 {
b1011 /"
b1011 0"
b10001011000000100000000001101001 ?
b10001011000000100000000001101001 +"
1J
b1001 &
b1001 -"
b1001 D"
b10101010000000010000001010000101 @
b10101010000000010000001010000101 f
b10101010000000010000001010000101 t
b1010 P
b1010 u
b1010 !"
b10000 *
b10000 x
b10000 #"
b10000 2"
b1 0
b1 e
b1 w
b1 3"
b10100 3
b10100 ^
b10100 v
b101 '
b101 d
b101 z
b10101010000 D
b10101010000 a
b10101010000 y
b1 2
b1 n
b1 G"
b10100 4
b10100 o
b10100 F"
0!
#27
b0 T
b0 r
b0 6"
1/
1:
1Z
bx 5
bx A"
bx C"
b0xxxxxxxxx +
b0xxxxxxxxx m
b0xxxxxxxxx K"
bx 5"
bx B"
x@"
bx ?"
bx >"
b10101010000000010000001010000101 A
b10101010000000010000001010000101 j
b10101010000000010000001010000101 '"
b101 (
b101 l
b101 ("
b1 1
b1 k
b1 ;"
0E
b10101 W
b10101 i
b10101 &"
b10101 :"
b11010 =
b11010 h
b11010 ."
b100000 I"
bx N
bx q
bx }
bx J"
b1011 O
b1011 p
b1011 ~
1!
#28
bx X
bx _
bx c
bx >
bx g
bx $"
b0xxxxxxxxx 6
b0xxxxxxxxx \
b0xxxxxxxxx 4"
b10101 )
b10101 9"
b10101 E"
b1100 C
b1100 {
b1100 /"
b1100 0"
b10 [
b10 ]
b10 b
bx 2
bx n
bx G"
bx 4
bx o
bx F"
bx @
bx f
bx t
18
1-
1Y
b0 U
b0 `
b0 s
b1011 P
b1011 u
b1011 !"
b0xxxxxxxxx *
b0xxxxxxxxx x
b0xxxxxxxxx #"
b0xxxxxxxxx 2"
bx '
bx d
bx z
bx D
bx a
bx y
b10101010000000010000001010000101 ?
b10101010000000010000001010000101 +"
b101 &
b101 -"
b101 D"
b10101 V
b10101 *"
b10101 7"
0!
#29
bx <
bx )"
bx <"
b1100 O
b1100 p
b1100 ~
b100000 I"
bx A
bx j
bx '"
19
1.
bx (
bx l
bx ("
bx W
bx i
bx &"
bx :"
bx =
bx h
bx ."
1!
#30
bx )
bx 9"
bx E"
b1101 C
b1101 {
b1101 /"
b1101 0"
bx ?
bx +"
17
bx &
bx -"
bx D"
bx V
bx *"
bx 7"
bx ;
bx ,"
bx 8"
b1100 P
b1100 u
b1100 !"
bx 0
bx e
bx w
bx 3"
bx 3
bx ^
bx v
0!
#31
bx 1
bx k
bx ;"
b100000 I"
b1101 O
b1101 p
b1101 ~
1!
#32
b1110 C
b1110 {
b1110 /"
b1110 0"
b1101 P
b1101 u
b1101 !"
0!
#33
b1110 O
b1110 p
b1110 ~
b100000 I"
1!
#34
b1111 C
b1111 {
b1111 /"
b1111 0"
b1110 P
b1110 u
b1110 !"
0!
#35
b100000 I"
b1111 O
b1111 p
b1111 ~
1!
#36
b10000 C
b10000 {
b10000 /"
b10000 0"
b1111 P
b1111 u
b1111 !"
0!
#37
b10000 O
b10000 p
b10000 ~
b100000 I"
1!
#38
b10001 C
b10001 {
b10001 /"
b10001 0"
b10000 P
b10000 u
b10000 !"
0!
#39
b100000 I"
b10001 O
b10001 p
b10001 ~
1!
#40
b10010 C
b10010 {
b10010 /"
b10010 0"
b10001 P
b10001 u
b10001 !"
0!
#41
b10010 O
b10010 p
b10010 ~
b100000 I"
1!
#42
b10011 C
b10011 {
b10011 /"
b10011 0"
b10010 P
b10010 u
b10010 !"
0!
#43
b100000 I"
b10011 O
b10011 p
b10011 ~
1!
#44
b10100 C
b10100 {
b10100 /"
b10100 0"
b10011 P
b10011 u
b10011 !"
0!
#45
b10100 O
b10100 p
b10100 ~
b100000 I"
1!
#46
b10101 C
b10101 {
b10101 /"
b10101 0"
b10100 P
b10100 u
b10100 !"
0!
#47
b100000 I"
b10101 O
b10101 p
b10101 ~
1!
#48
b10110 C
b10110 {
b10110 /"
b10110 0"
b10101 P
b10101 u
b10101 !"
0!
#49
b10110 O
b10110 p
b10110 ~
b100000 I"
1!
#50
b10111 C
b10111 {
b10111 /"
b10111 0"
b10110 P
b10110 u
b10110 !"
0!
